" Don't try to be vi compatible
set nocompatible

" Helps force plugins to load correctly when it is turned back on below
filetype off

" Install vim-plug, if not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

" Generic plugins
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-commentary'
Plug 'yonchu/accelerated-smooth-scroll'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'dense-analysis/ale'
Plug 'ryvnf/readline.vim'
Plug 'itchyny/lightline.vim'
Plug 'wellle/context.vim'
Plug 'osyo-manga/vim-anzu'
"Plug 'sheerun/vim-polyglot'
"Plug '/usr/local/opt/fzf'
"Plug 'junegunn/fzf.vim'
"Plug 'ycm-core/YouCompleteMe'
Plug 'vim-scripts/DrawIt'
Plug 'tpope/vim-dispatch'

" Colorschemes
Plug 'morhetz/gruvbox'

" Python plugins
Plug 'vim-python/python-syntax', { 'for': 'python' }
"Plug 'davidhalter/jedi-vim', { 'for': 'python' }

" Python requirements plugins
Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}

" Golang plugins
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries', 'for': 'go' }

" Markdown plugins
"Plug 'junegunn/goyo.vim', { 'for': 'markdown' }

" Typescript plugins
Plug 'HerringtonDarkholme/yats.vim', { 'for': 'typescript' }

" Rust plugins
Plug 'rust-lang/rust.vim', { 'for': 'rust' }

" Javascript plugins
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'mxw/vim-jsx', { 'for': 'javascript' }

" HCL plugins
Plug 'jvirtanen/vim-hcl', { 'for': 'hcl' }

call plug#end()

" Turn on syntax highlighting
syntax on

" For plugins to load correctly
filetype plugin indent on

if $TERM == "xterm-kitty"
  " Mouse support
  set mouse=a
  set ttymouse=sgr
  set balloonevalterm
  " Styled and colored underline support
  let &t_AU = "\e[58:5:%dm"
  let &t_8u = "\e[58:2:%lu:%lu:%lum"
  let &t_Us = "\e[4:2m"
  let &t_Cs = "\e[4:3m"
  let &t_ds = "\e[4:4m"
  let &t_Ds = "\e[4:5m"
  let &t_Ce = "\e[4:0m"
  " Strikethrough
  let &t_Ts = "\e[9m"
  let &t_Te = "\e[29m"
  " Truecolor support
  let &t_8f = "\e[38:2:%lu:%lu:%lum"
  let &t_8b = "\e[48:2:%lu:%lu:%lum"
  let &t_RF = "\e]10;?\e\\"
  let &t_RB = "\e]11;?\e\\"
  " Bracketed paste
  let &t_BE = "\e[?2004h"
  let &t_BD = "\e[?2004l"
  let &t_PS = "\e[200~"
  let &t_PE = "\e[201~"
  " Cursor control
  let &t_RC = "\e[?12$p"
  let &t_SH = "\e[%d q"
  let &t_RS = "\eP$q q\e\\"
  let &t_SI = "\e[5 q"
  let &t_SR = "\e[3 q"
  let &t_EI = "\e[1 q"
  let &t_VS = "\e[?12l"
  " Focus tracking
  let &t_fe = "\e[?1004h"
  let &t_fd = "\e[?1004l"
  execute "set <FocusGained>=\<Esc>[I"
  execute "set <FocusLost>=\<Esc>[O"
  " Window title
  let &t_ST = "\e[22;2t"
  let &t_RT = "\e[23;2t"

  " vim hardcodes background color erase even if the terminfo file does
  " not contain bce. This causes incorrect background rendering when
  " using a color theme with a background color in terminals such as
  " kitty that do not support background color erase.
  let &t_ut=''

  " for using ryvnf/readline.vim with kitty terminal
  let g:readline_meta = 1
endif

" Security
set modelines=0

" Show line numbers
set number
set relativenumber

" Show file stats
set ruler

" Blink cursor on error instead of beeping (grr)
set visualbell

" Encoding
set encoding=utf-8

" Whitespace
set wrap
"set textwidth=79
set formatoptions=tcqrn1
"set formatoptions=qrn1
"set tabstop=4
"set shiftwidth=4
"set softtabstop=4
"set expandtab
"set noshiftround

" Setting backup copy preserves file inodes, which are needed for Docker file mounting
set backupcopy=yes

" Cursor motion
"set scrolloff=3
"set scroll=10
set backspace=indent,eol,start
set matchpairs+=<:> " use % to jump between pairs

" Move up/down editor lines
"nnoremap j gj
"nnoremap k gk

" Allow hidden buffers
"set hidden

" Rendering
"set ttyfast

" Status bar
set laststatus=2
" lightline takes care of showing mode
set noshowmode

" Last line
set showmode
set showcmd

" Searching
"nnoremap / /\v
"vnoremap / /\v
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
"map <leader><space> :let @/=''<cr> " clear search

" Formatting
"map <leader>q gqip

" Visualize tabs and newlines
"set showbreak=↪\
set showbreak=>\
set listchars=tab:→\ ,eol:¬,nbsp:␣,trail:•,extends:⟩,precedes:⟨,space:·
"set listchars=tab:→\ ,eol:↲,nbsp:␣,trail:•,extends:⟩,precedes:⟨,space:·
"set listchars=tab:→\ ,eol:↲,nbsp:␣,trail:•,extends:⟩,precedes:⟨,space:∙
"set listchars=tab:▸\ ,eol:¬
"set listchars=tab:▸—,eol:↲,nbsp:␣,trail:•,extends:⟩,precedes:⟨,space:∙
"set listchars=tab:→\ ,trail:∙,nbsp:•
"set listchars=tab:▸—,eol:¬,space:·
"set listchars=tab:>-,eol:<,space:*,trail:-

" Uncomment this to enable by default:
set list " To enable by default
" Or use your leader key + l to toggle on/off
"map <leader>l :set list!<CR> " Toggle tabs and EOL

" Color scheme (terminal)
set t_Co=256
set background=dark
set termguicolors
" gruvbox settings
let g:gruvbox_bold = 1
let g:gruvbox_italic = 1
let g:gruvbox_undercurl = 1
let g:gruvbox_underline = 1
let g:gruvbox_inverse = 1
"let g:gruvbox_improved_strings = 1
let g:gruvbox_contrast_dark = "soft"
let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified', 'anzu' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component': {
      \   'filename': '%F',
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead',
      \   'anzu': 'anzu#search_status'
      \ },
      \ }
colorscheme gruvbox

inoremap jk <ESC>
"let mapleader=","
"nnoremap <leader><space> :noh<cr>
"nnoremap <tab> %
"vnoremap <tab> %
set wildmenu
"set wildmode=list:longest
"set lazyredraw
set regexpengine=1
set foldenable
set foldlevelstart=10
set foldnestmax=10
set foldmethod=indent

" vim-airline configuration
"let g:airline#extensions#tabline#enabled = 1
"let g:airline_theme='gruvbox'

autocmd VimLeave * call system("xsel -ib", getreg('+'))
set clipboard=unnamed,unnamedplus
set autoread
"autocmd FileChangedShellPost * checktime
"autocmd FileChangedShell *.txt checktime
"autocmd FileChangedShell * bufdo e!
"autocmd FileChangedShell * echo "File changed, press F9 to reload."

" shows partial command on bottom right
set cursorline
"set undofile
"let g:elite_mode=1

"" Disable arrow movement, resize splits instead.
"if get(g:, 'elite_mode')
"	nnoremap <Up>    :resize +2<CR>
"	nnoremap <Down>  :resize -2<CR>
"	nnoremap <Left>  :vertical resize +2<CR>
"	nnoremap <Right> :vertical resize -2<CR>
"endif
set updatetime=100

" vim airline configuration
"let g:airline_theme='gruvbox'
"let g:airline#extensions#tabline#enabled = 1
"let g:airline_powerline_fonts = 1
"let g:airline_theme='term'

"set colorcolumn=80

nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Test line: foo bar baz foobar fubar
" Test line: foo bar baz foobar fubar foo foo foobaz
"set guifont=SF\ Mono\ Regular\ Nerd\ Font\ Mono:h14
"set guifont=Fira\ Code\ Nerd\ Font\ Mono\ 11
set guifont=Iosevka\ 11

" Enables scrolling and VISUAL selection with mouse
set mouse=a

"nmap <F8> :TagbarToggle<CR>

" splits
set splitbelow
set splitright

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" vim-anzu
" mapping
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
" clear status
nmap <Esc><Esc> <Plug>(anzu-clear-search-status)
" statusline
"set statusline=%{anzu#search_status()}

set tags=tags
"autocmd BufWritePost *.py silent! !ctags -R --python-kinds=-i --languages=python 2&gt; /dev/null &amp;
"

let g:ale_completion_enabled = 1
let g:ale_completion_delay = 10
let g:ale_completion_max_suggestions = 50

" gopass configuration (https://github.com/gopasspw/gopass/blob/master/docs/setup.md#securing-your-editor)
"au BufNewFile,BufRead /dev/shm/gopass.* setlocal noswapfile nobackup noundofile

let g:netrw_banner = 0
let g:netrw_browse_split = 4
let g:netrw_winsize = 25
let g:netrw_altv = 1
let g:netrw_alto = 1

map <silent> <C-L> :Lexplore<CR>
